module sadder(input clk,rst,input [3:0]a,b,output [3:0]sum);
reg load,shift;
reg [2:0]ps,ns;
reg [3:0]qa,qb;
wire ain,bin,cout,s;
reg cin;
parameter s0=3'b000;
parameter s1=3'b001;
parameter s2=3'b010;
parameter s3=3'b011;
parameter s4=3'b100;
always @(ps) begin
case(ps)
s0: ns=s1;
s1: ns=s2;
s2: ns=s3;
s3: ns=s4;
s4: ns=s0;
default: ns=s0;
endcase
end
always@(posedge clk or posedge rst)
begin
if(rst)
ps<=s0;
else
ps<=ns;
end
always @(ps) begin
case(ps)
s0:{load,shift}=2'b10;
s1:{load,shift}=2'b01;
s2:{load,shift}=2'b01;
s3:{load,shift}=2'b01;
s4:{load,shift}=2'b01;
default:{load,shift}=2'b10;
endcase
end
always @(posedge clk or posedge rst)
begin
if(rst)
begin
qa<=4'b0000;
qb<=4'b0000;
end
else if(load)
begin
qa<= a;
qb<=b;
end
else if(shift)
begin
qa<={s,qa[3:1]};
qb<={qb[0],qb[3:1]};
end
end
assign ain=qa[0];
assign bin=qb[0];
always @(posedge clk or posedge rst)
begin
if(rst)
cin<=1'b0;
else
cin<=cout;
end
assign {cout,s}=ain+bin+cin;
assign sum=qa;
endmodule
