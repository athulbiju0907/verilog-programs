//ripple carry adder without module instantiation
module rca_4bit(a, b, cin, sum, cout);
 input [3:0] a, b;
 input cin;
 output [3:0] sum;
 output cout;
 wire w1,w2,w3,w4,w5,w6,w7,w8,w9;
 xor (sum[0], a[0], b[0], cin);
 and (w1, a[0], b[0]);
 and (w2, a[0], cin);
 and (w3, b[0], cin);
 or (c1, w1, w2, w3);
 xor (sum[1], a[1], b[1], c1);
 and (w4, a[1], b[1]);
 and (w5, a[1], c1);
and (w6, b[1], c1);
 or (c2, w4, w5, w6);
 xor (sum[2], a[2], b[2], c2);
 and (w7, a[2], b[2]);
 and (w8, a[2], c2);
 and (w9, b[2], c2);
 or (c3, w7, w8, w9);
 xor (sum[3], a[3], b[3], c3);
 and (w10, a[3], b[3]);
 and (w11, a[3], c3);
 and (w12, b[3], c3);
 or (cout, w10, w11, w12);
endmodule

//tb
module test_rca4bit();
reg [3:0]a,b;
reg cin;
wire [3:0]sum;
wire cout;
rca_4bit dut0(.a(a),.b(b),.cin(cin), .sum(sum),.cout(cout));
initial begin
a=4'b1001; b=4'b1010; cin=1'b0;
#10;
a=4'b1011; b=4'b1010; cin=1'b1;
#10;
a=4'b1001; b=4'b1111; cin=1'b0;
#10;
a=4'b1011; b=4'b1110; cin=1'b1;
#200;
$finish();
end
endmodule
